{"ast":null,"code":"export const cohortName = \"2209-ftb-et-web-pt\";\nexport const BASE_URL = `https://strangers-things.herokuapp.com/api/`;\nexport async function getPosts() {\n  try {\n    const data = await fetch(`${BASE_URL}${cohortName}/posts`);\n    const result = await data.json();\n    return result;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function addPosts(postDetail, token) {\n  const response = await fetch(`${BASE_URL}${cohortName}/posts`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      post: {\n        title: postDetail.title,\n        description: postDetail.description,\n        location: postDetail.location,\n        price: postDetail.price,\n        willDeliver: postDetail.willDeliver\n      }\n    })\n  }).then(response => response.json()).then(result => {\n    console.log(result);\n  }).catch(console.error);\n}\nexport async function loginUser(username, password) {\n  try {\n    const response = await fetch(`${BASE_URL}${cohortName}/users/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const result = await response.json();\n    const token = result.data.token;\n    return token;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function connectProfile(token) {\n  const response = await fetch(`${BASE_URL}${cohortName}/users/me`, {\n    headers: {\n      \"Content-Type\": \"application.json\",\n      Authorization: `Bearer ${token}`\n    }\n  });\n  const result = await response.json();\n  return result;\n}\nexport async function getUser(authToken) {\n  try {\n    const userData = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${authToken}`\n    };\n    const response = await fetch(`${BASE_URL}${cohortName}/users/me`, {\n      headers: userData\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function createUser(username, password) {\n  try {\n    console.log(`${BASE_URL}${cohortName}/users/register`);\n    const response = await fetch(`${BASE_URL}${cohortName}/users/Register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function deletePosts(token, postid) {\n  try {\n    const response = await fetch(`${BASE_URL}${cohortName}/posts/${postid}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error(\"Isssue deleting Posts\", error);\n  }\n}\nexport async function sendMessage(token, postid, content) {\n  const response = await fetch(`${BASE_URL}${cohortName}/posts/${postid}/messages`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      message: {\n        content: content\n      }\n    })\n  }).then(response => response.json()).then(result => {\n    console.log(result, \"this is result for sendMessage\");\n  }).catch(console.error);\n}","map":{"version":3,"names":["cohortName","BASE_URL","getPosts","data","fetch","result","json","error","addPosts","postDetail","token","response","method","headers","Authorization","body","JSON","stringify","post","title","description","location","price","willDeliver","then","console","log","catch","loginUser","username","password","user","connectProfile","getUser","authToken","userData","createUser","deletePosts","postid","sendMessage","content","message"],"sources":["/Users/safirtrew/Desktop/Strangers_Things/my-app/src/api/index.js"],"sourcesContent":["export const cohortName = \"2209-ftb-et-web-pt\";\nexport const BASE_URL = `https://strangers-things.herokuapp.com/api/`;\n\nexport async function getPosts() {\n  try {\n    const data = await fetch(`${BASE_URL}${cohortName}/posts`);\n    const result = await data.json();\n    return result;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function addPosts(postDetail, token) {\n  const response = await fetch(`${BASE_URL}${cohortName}/posts`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({\n      post: {\n        title: postDetail.title,\n        description: postDetail.description,\n        location: postDetail.location,\n        price: postDetail.price,\n        willDeliver: postDetail.willDeliver,\n      },\n    }),\n  })\n    .then((response) => response.json())\n    .then((result) => {\n      console.log(result);\n    })\n    .catch(console.error);\n}\n\nexport async function loginUser(username, password) {\n  try {\n    const response = await fetch(`${BASE_URL}${cohortName}/users/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password,\n        },\n      }),\n    });\n    const result = await response.json();\n    const token = result.data.token;\n    return token;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function connectProfile(token) {\n  const response = await fetch(`${BASE_URL}${cohortName}/users/me`, {\n    headers: {\n      \"Content-Type\": \"application.json\",\n      Authorization: `Bearer ${token}`,\n    },\n  });\n  const result = await response.json();\n  return result;\n}\n\nexport async function getUser(authToken) {\n  try {\n    const userData = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${authToken}`,\n    };\n    const response = await fetch(`${BASE_URL}${cohortName}/users/me`, {\n      headers: userData,\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function createUser(username, password) {\n  try {\n    console.log(`${BASE_URL}${cohortName}/users/register`);\n    const response = await fetch(`${BASE_URL}${cohortName}/users/Register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password,\n        },\n      }),\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function deletePosts(token, postid) {\n  try {\n    const response = await fetch(`${BASE_URL}${cohortName}/posts/${postid}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const result = await response.json();\n    return result;\n  } catch (error) {\n    console.error(\"Isssue deleting Posts\", error);\n  }\n}\n\nexport async function sendMessage(token, postid, content) {\n  const response = await fetch(\n    `${BASE_URL}${cohortName}/posts/${postid}/messages`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify({\n        message: {\n          content: content,\n        },\n      }),\n    }\n  )\n    .then((response) => response.json())\n    .then((result) => {\n      console.log(result, \"this is result for sendMessage\");\n    })\n    .catch(console.error);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}